#+title: My Emacs Configuration
#+author: Diego Comfort

* Miscellaneous
** Theme
TODO: create a custom theme. Maybe something simple like the one
Tsoding uses, but with the Endeavour image color scheme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (add-to-list 'custom-theme-load-path
	       (expand-file-name "manually-installed-packages/gruber-darker-theme" user-emacs-directory))
  (load-theme 'gruber-darker t)
#+end_src

** Line Numbering
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode -1)
  (require 'conf-mode)
  (dolist (mode '(org-mode-hook
		  prog-mode-hook
		  conf-mode-hook
		  text-mode-hook
		  dired-mode-hook))
    (add-hook mode '(lambda () (display-line-numbers-mode 1))))
#+end_src 

** Auto-Save + Backups
Code taken from this [[https://stackoverflow.com/a/18330742][answer]] on Stack Overflow.
#+begin_src emacs-lisp
  (setq backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p backup-directory))
      (make-directory backup-directory t))
  (setq backup-directory-alist `(("." . ,backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
	backup-by-copying t               ; don't clobber symlinks
	version-control t                 ; version numbers for backup files
	delete-old-versions t             ; delete excess backup files silently
	kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
	kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
	auto-save-default t               ; auto-save every buffer that visits a file
	auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
	auto-save-interval 200)           ; number of keystrokes between auto-saves (default: 300)
#+end_src 

** Dissabling/Muting/Hiding annoying crap
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq ring-bell-function 'ignore)
  (setq server-client-instructions nil)
  (setq disabled-command-function nil)
#+end_src 

** Smooth scrolling
#+begin_src emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 10)
#+end_src

** Load Path
#+begin_src emacs-lisp
  (let ((default-directory  "~/.config/emacs/manually-installed-packages/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

** Pop-up frames
Makes Emacs create a new frame (a traditional "window") instead of an
Emacs window every time a new window would be opened. This is so I can
use i3 navigation commands instead of the C-x crap from Emacs
#+begin_src emacs-lisp
  (setq pop-up-frames t)
#+end_src

** Cursor
#+begin_src emacs-lisp
  (setq blink-cursor-blinks -1)                ; Make the cursor never stop blinking
#+end_src

** Disable show-paren-mode
#+begin_src emacs-lisp
  (show-paren-mode -1)
#+end_src

** Single Space After Sentences
This makes `forward-setence` (M-e) and `backward-sentence` (M-a) work
properly
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

* Packages
** Use-Package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)    ; Doesn't seem to work for some reason
#+end_src 

** Mulitple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t)                          ; See Use-Package
  (multiple-cursors-mode 1)
  (global-set-key (kbd "C->") ' mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C->") 'mc/mark-all-like-this)
#+end_src 

** Ivy/Counsel, 
Note to self: sometimes, IVY seems to cause emacs to go very slowly.
In that case, turn off ivy mode with ~M-x ivy-mode~ and then turn it
back on again with the same command
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)                          ; See Use-Package
  (use-package ivy
    :ensure t                           ; See Use-Package
    :init (ivy-mode 1))
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  ;; Ivy-based interface to standard commands
  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
#+end_src 

** Ivy-rich
Descriptions on Ivy completions
#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t                           ; See Use-Package
    :init (ivy-rich-mode 1))
#+end_src

** Prescient
Sort ivy completions
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :ensure t
    :config
    (ivy-prescient-mode)
    (add-to-list 'completion-styles 'prescient))
#+end_src

** Helpful
Better help buffers
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t                           ; See Use-Package
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src 

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src 

** Telephone-line
I'm using the [[https://github.com/dbordak/telephone-line/blob/master/examples.org#cubed][Cubed Example]] for now
#+begin_src emacs-lisp
  (use-package telephone-line
    :ensure t)                            ; See Use-Package
  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
	telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
	telephone-line-primary-right-separator 'telephone-line-cubed-right
	telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  (setq telephone-line-height 24
	telephone-line-evil-use-short-tag t)
  (telephone-line-mode 1)
#+end_src

** Shader mode (glsl)
#+begin_src emacs-lisp
  (use-package glsl-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.vs\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.fs\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
#+end_src

** Drag lines (move-dup)
#+begin_src emacs-lisp
  (use-package move-dup
    :ensure t
    :bind (("M-p" . move-dup-move-lines-up)
	   ("M-n" . move-dup-move-lines-down)))
#+end_src

** Typescript mode
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t)
#+end_src

** Fish mode
#+begin_src emacs-lisp
  (use-package fish-mode
    :ensure t
    :config (add-hook 'fish-mode-hook (lambda ()
					(add-hook 'before-save-hook 'fish_indent-before-save))))
#+end_src
* Modes
** C
#+begin_src emacs-lisp
  (setq-default c-default-style "linux")
  (add-hook 'prog-mode-hook #'whitespace-mode)
  ;; (add-hook 'prog-mode-hook #'auto-fill-mode)
  (add-hook 'prog-mode-hook (lambda () (setq fill-column 80)))
#+end_src 

** Whitespace 
#+begin_src emacs-lisp
  ;; From whitespace-display-mappings
  (setq whitespace-display-mappings '((space-mark   ?\     [?·]     [?.])		; space - middle dot
				      (space-mark   ?\xA0  [?¤]     [?_])		; hard space - currency sign
				      (newline-mark ?\n    [?\\ ?n ?\n])                ; newline (mine) - \n
				      (tab-mark    ?\t     [?\\ ?t ?\t])                ; tab (mine) - \t
				      ;; (newline-mark ?\n    [?$ ?\n])			; eol - dollar sign
				      ;; (newline-mark ?\n    [?↵ ?\n] [?$ ?\n])	; eol - downwards arrow
				      ;; (newline-mark ?\n    [?¶ ?\n] [?$ ?\n])	; eol - pilcrow
				      ;; (newline-mark ?\n    [?¯ ?\n]  [?$ ?\n])	; eol - overscore
				      ;; (newline-mark ?\n    [?¬ ?\n]  [?$ ?\n])	; eol - negation
				      ;; (newline-mark ?\n    [?° ?\n]  [?$ ?\n])	; eol - degrees
				      ;;
				      ;; WARNING: the mapping below has a problem.
				      ;; When a TAB occupies exactly one column, it will display the
				      ;; character ?\xBB at that column followed by a TAB which goes to
				      ;; the next TAB column.
				      ;; If this is a problem for you, please, comment the line below.
				      ;; (tab-mark     ?\t    [?» ?\t] [?\\ ?\t])	; tab - right guillemet
				      ))
#+end_src

** Org-mode
#+begin_src emacs-lisp
  (require 'org)
  (setq org-return-follows-link t)
  (setq org-todo-keywords '((sequence "TODO" "IN PROGRESS" "DONE")))
  (setq org-format-latex-options '(:foreground default
				   :background default
				   :scale 1.1
				   :html-foreground "Black"
				   :html-background "Transparent"
				   :html-scale 1.0
				   :matchers
				   ("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

** Grep
#+begin_src emacs-lisp
  (require 'grep)
  (grep-apply-setting 'grep-command "grep --color=always --null -irn -- ")
  (grep-apply-setting 'grep-use-null-device nil)
#+end_src

** Shell
#+begin_src emacs-lisp
  ;; (lambda () (setq fill-column 80))
  (add-hook 'shell-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src

* Elisp
** Functions
*** Finding/Opening the init file
#+begin_src emacs-lisp
  (defun open-config-file ()
    "Open the user init file"
    (interactive)
    (find-file (expand-file-name "emacs-config.org" user-emacs-directory)))
#+end_src 

*** Rerfeshing/Reverting the buffer
#+begin_src emacs-lisp
  (defun refresh-buffer ()
    "Revert/Refresh buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))
#+end_src 

*** Eval and Replace
From [[https://emacsredux.com/blog/2013/06/21/eval-and-replace/][Emacs Redux]]
#+begin_src emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))
#+end_src
*** Reverse Newline (open-line)
From [[https://www.reddit.com/r/emacs/comments/rcfggm/comment/hnu9mvy/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button][u/7890yuiop]]
#+begin_src emacs-lisp
  (defun open-line-and-indent (n)
    "Like `newline-and-indent' for the `open-line' command."
    (interactive "*p")
    (let ((eol (copy-marker (line-end-position))))
      (open-line n)
      (indent-region (point) eol)
      (set-marker eol nil)))
#+end_src

*** Open-line and Newline
I use it to open curly braces
#+begin_src emacs-lisp
  (defun open-line-newline ()
    "Preforms an `open-line-and-indent', then a `newline'."
    (interactive)
    (open-line-and-indent 1)
    (newline)
    (funcall (keymap-local-lookup "TAB" t)))
#+end_src

** Aliases
#+begin_src emacs-lisp
  (defalias 'ev-b 'eval-buffer)
  (defalias 'ev-r 'eval-region)
#+end_src 

** Keybinds
#+begin_src emacs-lisp
  (define-key prog-mode-map (kbd "C-c c") 'compile)
  (define-key compilation-mode-map (kbd "C-c c") 'compile)
  (define-key prog-mode-map (kbd "C-c r") 'recompile)
  (define-key compilation-mode-map (kbd "C-c r") 'recompile)
  (global-set-key (kbd "C-c C-e") 'eval-and-replace)
  (global-set-key (kbd "C-j") 'newline)
  (global-set-key (kbd "M-j") 'open-line-and-indent)
  (global-set-key (kbd "C-M-j") 'open-line-newline)
  (global-set-key (kbd "C-M-p") 'backward-up-list)
  (global-set-key (kbd "C-M-n") 'up-list)
  (global-set-key (kbd "M-SPC") 'set-mark-command)
  (define-key prog-mode-map (kbd "C-;") 'comment-line)
  (define-key conf-mode-map (kbd "C-;") 'comment-line)

  (global-unset-key (kbd "C-x C-n"))	; set-goal-colum
  (global-unset-key (kbd "C-r"))	; isearch-backward
#+end_src 

** Misc Elisp Configurations
#+begin_src emacs-lisp
  ;; (setq debug-on-error nil) ; (STOPS) Opens debug buffer (with stack trace) on elisp errors
#+end_src 

** After-init hooks
#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'open-config-file)
#+end_src
